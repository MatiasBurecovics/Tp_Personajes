openapi: 3.0.0
info:
  title: Tp_Personaje
  version: 1.0.0
servers:
  - url: http://localhost:5000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Pelicula
  - name: Personaje
paths:
  /movies:
    get:
      tags:
        - Pelicula
      summary: ListadoPeliculasOSeries
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Pelicula
      summary: Insert
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Imagen:
                  type: string
                Titulo:
                  type: string
                FechaDeCreacion:
                  type: string
                  format: date-time
                Calificacion:
                  type: integer
              required:
                - Imagen
                - Titulo
                - FechaDeCreacion
                - Calificacion
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /movies/{id}:
    delete:
      tags:
        - Pelicula
      summary: Delete
      parameters:
        - name: id
          in: path
          description: ID de la película
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Pelicula
      summary: UpdatePelicula
      parameters:
        - name: id
          in: path
          description: ID de la película
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                IdPelicula:
                  type: integer
                Imagen:
                  type: string
                Titulo:
                  type: string
                FechaDeCreacion:
                  type: string
                  format: date-time
                Calificacion:
                  type: integer
              required:
                - IdPelicula
                - Imagen
                - Titulo
                - FechaDeCreacion
                - Calificacion
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Pelicula
      summary: DetallePelicula
      parameters:
        - name: id
          in: path
          description: ID de la película
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /movies/search:
    get:
      tags:
        - Pelicula
      summary: BuscarPeliculaPorFiltros
      security:
        - bearerAuth: []
      parameters:
        - name: order
          in: query
          description: Orden de clasificación
          schema:
            type: string
          example: DESC
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /characters:
    get:
      tags:
        - Personaje
      summary: ListadoPersonaje
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Personaje
      summary: Insert
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Imagen:
                  type: string
                Nombre:
                  type: string
                Edad:
                  type: integer
                Peso:
                  type: integer
                Historia:
                  type: string
              required:
                - Imagen
                - Nombre
                - Edad
                - Peso
                - Historia
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /characters/{id}:
    get:
      tags:
        - Personaje
      summary: DetallePersonaje
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID del personaje
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Personaje
      summary: UpdatePersonaje
      parameters:
        - name: id
          in: path
          description: ID del personaje
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                IdPersonaje:
                  type: integer
                Imagen:
                  type: string
                Nombre:
                  type: string
                Edad:
                  type: integer
                Peso:
                  type: integer
                Historia:
                  type: string
              required:
                - IdPersonaje
                - Imagen
                - Nombre
                - Edad
                - Peso
                - Historia
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Personaje
      summary: Delete
      parameters:
        - name: id
          in: path
          description: ID del personaje
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /characters/search:
    get:
      tags:
        - Personaje
      summary: BusquedaPersonajeConFiltros
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Nombre del personaje
          schema:
            type: string
        - name: age
          in: query
          description: Edad del personaje
          schema:
            type: integer
        - name: weight
          in: query
          description: Peso del personaje
          schema:
            type: integer
        - name: movies
          in: query
          description: ID de la película
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
